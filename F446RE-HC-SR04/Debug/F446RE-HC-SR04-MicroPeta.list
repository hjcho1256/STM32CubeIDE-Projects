
F446RE-HC-SR04-MicroPeta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003dd4  08003dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e2c  08003e2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e34  08003e34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08003eac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003eac  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce36  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a20  00000000  00000000  0002ced6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  0002f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e90  00000000  00000000  00030030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e235  00000000  00000000  00051ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0c3d  00000000  00000000  000600f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  00130d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003dbc 	.word	0x08003dbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003dbc 	.word	0x08003dbc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b598      	push	{r3, r4, r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f000 fb48 	bl	8001438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f8ac 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f000 f992 	bl	80010d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000db0:	f000 f966 	bl	8001080 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000db4:	f000 f914 	bl	8000fe0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_TIM_Base_Start(&htim1);
 8000db8:	4849      	ldr	r0, [pc, #292]	; (8000ee0 <main+0x140>)
 8000dba:	f001 fcb7 	bl	800272c <HAL_TIM_Base_Start>
  	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc4:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <main+0x144>)
 8000dc6:	f000 fe5f 	bl	8001a88 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd0:	4844      	ldr	r0, [pc, #272]	; (8000ee4 <main+0x144>)
 8000dd2:	f000 fe59 	bl	8001a88 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dd6:	4b42      	ldr	r3, [pc, #264]	; (8000ee0 <main+0x140>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
		    while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000dde:	bf00      	nop
 8000de0:	4b3f      	ldr	r3, [pc, #252]	; (8000ee0 <main+0x140>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	2b09      	cmp	r3, #9
 8000de8:	d9fa      	bls.n	8000de0 <main+0x40>
		    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df0:	483c      	ldr	r0, [pc, #240]	; (8000ee4 <main+0x144>)
 8000df2:	f000 fe49 	bl	8001a88 <HAL_GPIO_WritePin>

		    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000df6:	f000 fb85 	bl	8001504 <HAL_GetTick>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a3a      	ldr	r2, [pc, #232]	; (8000ee8 <main+0x148>)
 8000dfe:	6013      	str	r3, [r2, #0]
		    // wait for the echo pin to go high
		    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000e00:	bf00      	nop
 8000e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e06:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <main+0x144>)
 8000e08:	f000 fe26 	bl	8001a58 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d108      	bne.n	8000e24 <main+0x84>
 8000e12:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <main+0x148>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f103 040a 	add.w	r4, r3, #10
 8000e1a:	f000 fb73 	bl	8001504 <HAL_GetTick>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	429c      	cmp	r4, r3
 8000e22:	d8ee      	bhi.n	8000e02 <main+0x62>
		    Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e24:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <main+0x140>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	4a30      	ldr	r2, [pc, #192]	; (8000eec <main+0x14c>)
 8000e2c:	6013      	str	r3, [r2, #0]

		    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000e2e:	f000 fb69 	bl	8001504 <HAL_GetTick>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a2c      	ldr	r2, [pc, #176]	; (8000ee8 <main+0x148>)
 8000e36:	6013      	str	r3, [r2, #0]
		    // wait for the echo pin to go low
		    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000e38:	bf00      	nop
 8000e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3e:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <main+0x144>)
 8000e40:	f000 fe0a 	bl	8001a58 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d008      	beq.n	8000e5c <main+0xbc>
 8000e4a:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <main+0x148>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000e52:	f000 fb57 	bl	8001504 <HAL_GetTick>
 8000e56:	4603      	mov	r3, r0
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	d8ee      	bhi.n	8000e3a <main+0x9a>
		    Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e5c:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <main+0x140>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <main+0x150>)
 8000e64:	6013      	str	r3, [r2, #0]

		    Distance = (Value2-Value1)* 0.034/2;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <main+0x150>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <main+0x14c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb67 	bl	8000544 <__aeabi_ui2d>
 8000e76:	a318      	add	r3, pc, #96	; (adr r3, 8000ed8 <main+0x138>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fbdc 	bl	8000638 <__aeabi_dmul>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e90:	f7ff fcfc 	bl	800088c <__aeabi_ddiv>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f7ff fdde 	bl	8000a5c <__aeabi_d2uiz>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <main+0x154>)
 8000ea6:	801a      	strh	r2, [r3, #0]

		    sprintf((char*)buf, "%u.%02u m\r\n", (unsigned int)Distance, (unsigned int)Distance);
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <main+0x154>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <main+0x154>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	4911      	ldr	r1, [pc, #68]	; (8000ef8 <main+0x158>)
 8000eb4:	4811      	ldr	r0, [pc, #68]	; (8000efc <main+0x15c>)
 8000eb6:	f002 fb13 	bl	80034e0 <siprintf>
		    	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000eba:	4810      	ldr	r0, [pc, #64]	; (8000efc <main+0x15c>)
 8000ebc:	f7ff f9a8 	bl	8000210 <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <main+0x15c>)
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <main+0x160>)
 8000ecc:	f001 ff61 	bl	8002d92 <HAL_UART_Transmit>
		    HAL_Delay(50);
 8000ed0:	2032      	movs	r0, #50	; 0x32
 8000ed2:	f000 fb23 	bl	800151c <HAL_Delay>
	   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ed6:	e778      	b.n	8000dca <main+0x2a>
 8000ed8:	b020c49c 	.word	0xb020c49c
 8000edc:	3fa16872 	.word	0x3fa16872
 8000ee0:	2000008c 	.word	0x2000008c
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	20000118 	.word	0x20000118
 8000eec:	2000011c 	.word	0x2000011c
 8000ef0:	20000120 	.word	0x20000120
 8000ef4:	20000124 	.word	0x20000124
 8000ef8:	08003dd4 	.word	0x08003dd4
 8000efc:	20000128 	.word	0x20000128
 8000f00:	200000d4 	.word	0x200000d4

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b094      	sub	sp, #80	; 0x50
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2234      	movs	r2, #52	; 0x34
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fadc 	bl	80034d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <SystemClock_Config+0xd4>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <SystemClock_Config+0xd4>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f36:	6413      	str	r3, [r2, #64]	; 0x40
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <SystemClock_Config+0xd4>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f44:	2300      	movs	r3, #0
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <SystemClock_Config+0xd8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f50:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <SystemClock_Config+0xd8>)
 8000f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <SystemClock_Config+0xd8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f70:	2302      	movs	r3, #2
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f7c:	2348      	movs	r3, #72	; 0x48
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 f8dd 	bl	8002150 <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f9c:	f000 f918 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fd7c 	bl	8001abc <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fca:	f000 f901 	bl	80011d0 <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3750      	adds	r7, #80	; 0x50
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_TIM1_Init+0x98>)
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <MX_TIM1_Init+0x9c>)
 8001000:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_TIM1_Init+0x98>)
 8001004:	2247      	movs	r2, #71	; 0x47
 8001006:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_TIM1_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_TIM1_Init+0x98>)
 8001010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001014:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_TIM1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_TIM1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_TIM1_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_TIM1_Init+0x98>)
 800102a:	f001 fb2f 	bl	800268c <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001034:	f000 f8cc 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_TIM1_Init+0x98>)
 8001046:	f001 fbd9 	bl	80027fc <HAL_TIM_ConfigClockSource>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001050:	f000 f8be 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_TIM1_Init+0x98>)
 8001062:	f001 fdcd 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800106c:	f000 f8b0 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000008c 	.word	0x2000008c
 800107c:	40010000 	.word	0x40010000

08001080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_USART2_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b8:	f001 fe1e 	bl	8002cf8 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f000 f885 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000d4 	.word	0x200000d4
 80010d0:	40004400 	.word	0x40004400

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <MX_GPIO_Init+0xf0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a34      	ldr	r2, [pc, #208]	; (80011c4 <MX_GPIO_Init+0xf0>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <MX_GPIO_Init+0xf0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <MX_GPIO_Init+0xf0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <MX_GPIO_Init+0xf0>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <MX_GPIO_Init+0xf0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <MX_GPIO_Init+0xf0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <MX_GPIO_Init+0xf0>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <MX_GPIO_Init+0xf0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <MX_GPIO_Init+0xf0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a1f      	ldr	r2, [pc, #124]	; (80011c4 <MX_GPIO_Init+0xf0>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_GPIO_Init+0xf0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001160:	4819      	ldr	r0, [pc, #100]	; (80011c8 <MX_GPIO_Init+0xf4>)
 8001162:	f000 fc91 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800116c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4813      	ldr	r0, [pc, #76]	; (80011cc <MX_GPIO_Init+0xf8>)
 800117e:	f000 fad7 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8001182:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <MX_GPIO_Init+0xf4>)
 800119c:	f000 fac8 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_GPIO_Init+0xf4>)
 80011b6:	f000 fabb 	bl	8001730 <HAL_GPIO_Init>

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020800 	.word	0x40020800

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <HAL_MspInit+0x4c>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_MspInit+0x4c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800121a:	2007      	movs	r0, #7
 800121c:	f000 fa54 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_TIM_Base_MspInit+0x3c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d10d      	bne.n	800125a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40010000 	.word	0x40010000
 800126c:	40023800 	.word	0x40023800

08001270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_UART_MspInit+0x84>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12b      	bne.n	80012ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_UART_MspInit+0x88>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_UART_MspInit+0x88>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_UART_MspInit+0x88>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_UART_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_UART_MspInit+0x88>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_UART_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ca:	230c      	movs	r3, #12
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012da:	2307      	movs	r3, #7
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <HAL_UART_MspInit+0x8c>)
 80012e6:	f000 fa23 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40004400 	.word	0x40004400
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000

08001300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <NMI_Handler+0x4>

08001306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler+0x4>

08001312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler+0x4>

0800131e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f000 f8c6 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800135c:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <_sbrk+0x5c>)
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <_sbrk+0x60>)
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <_sbrk+0x64>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <_sbrk+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d207      	bcs.n	8001394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001384:	f002 f87a 	bl	800347c <__errno>
 8001388:	4603      	mov	r3, r0
 800138a:	220c      	movs	r2, #12
 800138c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e009      	b.n	80013a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <_sbrk+0x64>)
 80013a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20020000 	.word	0x20020000
 80013b4:	00000400 	.word	0x00000400
 80013b8:	20000134 	.word	0x20000134
 80013bc:	20000150 	.word	0x20000150

080013c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <SystemInit+0x20>)
 80013c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <SystemInit+0x20>)
 80013cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ea:	490e      	ldr	r1, [pc, #56]	; (8001424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001400:	4c0b      	ldr	r4, [pc, #44]	; (8001430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800140e:	f7ff ffd7 	bl	80013c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001412:	f002 f839 	bl	8003488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f7ff fcc3 	bl	8000da0 <main>
  bx  lr    
 800141a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800141c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001428:	08003e3c 	.word	0x08003e3c
  ldr r2, =_sbss
 800142c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001430:	2000014c 	.word	0x2000014c

08001434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC_IRQHandler>
	...

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <HAL_Init+0x40>)
 8001442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_Init+0x40>)
 800144e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_Init+0x40>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 f931 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001466:	2000      	movs	r0, #0
 8001468:	f000 f808 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800146c:	f7ff feb6 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023c00 	.word	0x40023c00

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x54>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x58>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f93b 	bl	8001716 <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00e      	b.n	80014c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d80a      	bhi.n	80014c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f000 f911 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <HAL_InitTick+0x5c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000138 	.word	0x20000138

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000138 	.word	0x20000138

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff ffee 	bl	8001504 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffde 	bl	8001504 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d8f7      	bhi.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff47 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff5c 	bl	80015ac <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff8e 	bl	800161c <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffb0 	bl	8001684 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e165      	b.n	8001a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	429a      	cmp	r2, r3
 8001766:	f040 8154 	bne.w	8001a12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d005      	beq.n	8001782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177e:	2b02      	cmp	r3, #2
 8001780:	d130      	bne.n	80017e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b8:	2201      	movs	r2, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 0201 	and.w	r2, r3, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d017      	beq.n	8001820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d123      	bne.n	8001874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	69b9      	ldr	r1, [r7, #24]
 8001870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80ae 	beq.w	8001a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_GPIO_Init+0x300>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <HAL_GPIO_Init+0x300>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b5a      	ldr	r3, [pc, #360]	; (8001a30 <HAL_GPIO_Init+0x300>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d2:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <HAL_GPIO_Init+0x304>)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4f      	ldr	r2, [pc, #316]	; (8001a38 <HAL_GPIO_Init+0x308>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d025      	beq.n	800194a <HAL_GPIO_Init+0x21a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <HAL_GPIO_Init+0x30c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d01f      	beq.n	8001946 <HAL_GPIO_Init+0x216>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4d      	ldr	r2, [pc, #308]	; (8001a40 <HAL_GPIO_Init+0x310>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d019      	beq.n	8001942 <HAL_GPIO_Init+0x212>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4c      	ldr	r2, [pc, #304]	; (8001a44 <HAL_GPIO_Init+0x314>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0x20e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4b      	ldr	r2, [pc, #300]	; (8001a48 <HAL_GPIO_Init+0x318>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00d      	beq.n	800193a <HAL_GPIO_Init+0x20a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4a      	ldr	r2, [pc, #296]	; (8001a4c <HAL_GPIO_Init+0x31c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x206>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <HAL_GPIO_Init+0x320>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_GPIO_Init+0x202>
 800192e:	2306      	movs	r3, #6
 8001930:	e00c      	b.n	800194c <HAL_GPIO_Init+0x21c>
 8001932:	2307      	movs	r3, #7
 8001934:	e00a      	b.n	800194c <HAL_GPIO_Init+0x21c>
 8001936:	2305      	movs	r3, #5
 8001938:	e008      	b.n	800194c <HAL_GPIO_Init+0x21c>
 800193a:	2304      	movs	r3, #4
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x21c>
 800193e:	2303      	movs	r3, #3
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x21c>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x21c>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x21c>
 800194a:	2300      	movs	r3, #0
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195c:	4935      	ldr	r1, [pc, #212]	; (8001a34 <HAL_GPIO_Init+0x304>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196a:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <HAL_GPIO_Init+0x324>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198e:	4a31      	ldr	r2, [pc, #196]	; (8001a54 <HAL_GPIO_Init+0x324>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001994:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_GPIO_Init+0x324>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b8:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0c:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <HAL_GPIO_Init+0x324>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	f67f ae96 	bls.w	800174c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020800 	.word	0x40020800
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40021400 	.word	0x40021400
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0cc      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d90c      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0b8      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b10:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a58      	ldr	r2, [pc, #352]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	494d      	ldr	r1, [pc, #308]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d044      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d119      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e06f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e067      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4934      	ldr	r1, [pc, #208]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bac:	f7ff fcaa 	bl	8001504 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7ff fca6 	bl	8001504 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e04f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d20c      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e032      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4916      	ldr	r1, [pc, #88]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c42:	f000 f855 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	490a      	ldr	r1, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fc0a 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	08003de0 	.word	0x08003de0
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000000 	.word	0x20000000

08001ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0a9b      	lsrs	r3, r3, #10
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08003df0 	.word	0x08003df0

08001cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ccc:	f7ff ffdc 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0b5b      	lsrs	r3, r3, #13
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4903      	ldr	r1, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	08003df0 	.word	0x08003df0

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf4:	b0ae      	sub	sp, #184	; 0xb8
 8001cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d16:	4bcb      	ldr	r3, [pc, #812]	; (8002044 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	f200 8206 	bhi.w	8002130 <HAL_RCC_GetSysClockFreq+0x440>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d61 	.word	0x08001d61
 8001d30:	08002131 	.word	0x08002131
 8001d34:	08002131 	.word	0x08002131
 8001d38:	08002131 	.word	0x08002131
 8001d3c:	08001d69 	.word	0x08001d69
 8001d40:	08002131 	.word	0x08002131
 8001d44:	08002131 	.word	0x08002131
 8001d48:	08002131 	.word	0x08002131
 8001d4c:	08001d71 	.word	0x08001d71
 8001d50:	08002131 	.word	0x08002131
 8001d54:	08002131 	.word	0x08002131
 8001d58:	08002131 	.word	0x08002131
 8001d5c:	08001f61 	.word	0x08001f61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d60:	4bb9      	ldr	r3, [pc, #740]	; (8002048 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001d66:	e1e7      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d68:	4bb8      	ldr	r3, [pc, #736]	; (800204c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d6e:	e1e3      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d70:	4bb4      	ldr	r3, [pc, #720]	; (8002044 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d7c:	4bb1      	ldr	r3, [pc, #708]	; (8002044 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d071      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d88:	4bae      	ldr	r3, [pc, #696]	; (8002044 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	099b      	lsrs	r3, r3, #6
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001dae:	4622      	mov	r2, r4
 8001db0:	462b      	mov	r3, r5
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	0159      	lsls	r1, r3, #5
 8001dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc0:	0150      	lsls	r0, r2, #5
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	1a51      	subs	r1, r2, r1
 8001dca:	6439      	str	r1, [r7, #64]	; 0x40
 8001dcc:	4629      	mov	r1, r5
 8001dce:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001de0:	4649      	mov	r1, r9
 8001de2:	018b      	lsls	r3, r1, #6
 8001de4:	4641      	mov	r1, r8
 8001de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dea:	4641      	mov	r1, r8
 8001dec:	018a      	lsls	r2, r1, #6
 8001dee:	4641      	mov	r1, r8
 8001df0:	1a51      	subs	r1, r2, r1
 8001df2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001df4:	4649      	mov	r1, r9
 8001df6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001e08:	4649      	mov	r1, r9
 8001e0a:	00cb      	lsls	r3, r1, #3
 8001e0c:	4641      	mov	r1, r8
 8001e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e12:	4641      	mov	r1, r8
 8001e14:	00ca      	lsls	r2, r1, #3
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4622      	mov	r2, r4
 8001e1e:	189b      	adds	r3, r3, r2
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
 8001e22:	462b      	mov	r3, r5
 8001e24:	460a      	mov	r2, r1
 8001e26:	eb42 0303 	adc.w	r3, r2, r3
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e38:	4629      	mov	r1, r5
 8001e3a:	024b      	lsls	r3, r1, #9
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e42:	4621      	mov	r1, r4
 8001e44:	024a      	lsls	r2, r1, #9
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e5c:	f7fe fe1e 	bl	8000a9c <__aeabi_uldivmod>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4613      	mov	r3, r2
 8001e66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e6a:	e067      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6c:	4b75      	ldr	r3, [pc, #468]	; (8002044 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	099b      	lsrs	r3, r3, #6
 8001e72:	2200      	movs	r2, #0
 8001e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e84:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e86:	2300      	movs	r3, #0
 8001e88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e8e:	4622      	mov	r2, r4
 8001e90:	462b      	mov	r3, r5
 8001e92:	f04f 0000 	mov.w	r0, #0
 8001e96:	f04f 0100 	mov.w	r1, #0
 8001e9a:	0159      	lsls	r1, r3, #5
 8001e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea0:	0150      	lsls	r0, r2, #5
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	1a51      	subs	r1, r2, r1
 8001eaa:	62b9      	str	r1, [r7, #40]	; 0x28
 8001eac:	4629      	mov	r1, r5
 8001eae:	eb63 0301 	sbc.w	r3, r3, r1
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	018b      	lsls	r3, r1, #6
 8001ec4:	4641      	mov	r1, r8
 8001ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eca:	4641      	mov	r1, r8
 8001ecc:	018a      	lsls	r2, r1, #6
 8001ece:	4641      	mov	r1, r8
 8001ed0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ed4:	4649      	mov	r1, r9
 8001ed6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ee6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001eea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eee:	4692      	mov	sl, r2
 8001ef0:	469b      	mov	fp, r3
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	eb1a 0303 	adds.w	r3, sl, r3
 8001ef8:	623b      	str	r3, [r7, #32]
 8001efa:	462b      	mov	r3, r5
 8001efc:	eb4b 0303 	adc.w	r3, fp, r3
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f0e:	4629      	mov	r1, r5
 8001f10:	028b      	lsls	r3, r1, #10
 8001f12:	4621      	mov	r1, r4
 8001f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f18:	4621      	mov	r1, r4
 8001f1a:	028a      	lsls	r2, r1, #10
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f24:	2200      	movs	r2, #0
 8001f26:	673b      	str	r3, [r7, #112]	; 0x70
 8001f28:	677a      	str	r2, [r7, #116]	; 0x74
 8001f2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f2e:	f7fe fdb5 	bl	8000a9c <__aeabi_uldivmod>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4613      	mov	r3, r2
 8001f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f3c:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	3301      	adds	r3, #1
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f5e:	e0eb      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f6c:	4b35      	ldr	r3, [pc, #212]	; (8002044 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d06b      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	2200      	movs	r2, #0
 8001f80:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f94:	4622      	mov	r2, r4
 8001f96:	462b      	mov	r3, r5
 8001f98:	f04f 0000 	mov.w	r0, #0
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	0159      	lsls	r1, r3, #5
 8001fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa6:	0150      	lsls	r0, r2, #5
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4621      	mov	r1, r4
 8001fae:	1a51      	subs	r1, r2, r1
 8001fb0:	61b9      	str	r1, [r7, #24]
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001fc6:	4659      	mov	r1, fp
 8001fc8:	018b      	lsls	r3, r1, #6
 8001fca:	4651      	mov	r1, sl
 8001fcc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fd0:	4651      	mov	r1, sl
 8001fd2:	018a      	lsls	r2, r1, #6
 8001fd4:	4651      	mov	r1, sl
 8001fd6:	ebb2 0801 	subs.w	r8, r2, r1
 8001fda:	4659      	mov	r1, fp
 8001fdc:	eb63 0901 	sbc.w	r9, r3, r1
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ff0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ff4:	4690      	mov	r8, r2
 8001ff6:	4699      	mov	r9, r3
 8001ff8:	4623      	mov	r3, r4
 8001ffa:	eb18 0303 	adds.w	r3, r8, r3
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	462b      	mov	r3, r5
 8002002:	eb49 0303 	adc.w	r3, r9, r3
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002014:	4629      	mov	r1, r5
 8002016:	024b      	lsls	r3, r1, #9
 8002018:	4621      	mov	r1, r4
 800201a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800201e:	4621      	mov	r1, r4
 8002020:	024a      	lsls	r2, r1, #9
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800202a:	2200      	movs	r2, #0
 800202c:	65bb      	str	r3, [r7, #88]	; 0x58
 800202e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002030:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002034:	f7fe fd32 	bl	8000a9c <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002042:	e065      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x420>
 8002044:	40023800 	.word	0x40023800
 8002048:	00f42400 	.word	0x00f42400
 800204c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_GetSysClockFreq+0x458>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	099b      	lsrs	r3, r3, #6
 8002056:	2200      	movs	r2, #0
 8002058:	4618      	mov	r0, r3
 800205a:	4611      	mov	r1, r2
 800205c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002060:	653b      	str	r3, [r7, #80]	; 0x50
 8002062:	2300      	movs	r3, #0
 8002064:	657b      	str	r3, [r7, #84]	; 0x54
 8002066:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800206a:	4642      	mov	r2, r8
 800206c:	464b      	mov	r3, r9
 800206e:	f04f 0000 	mov.w	r0, #0
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	0159      	lsls	r1, r3, #5
 8002078:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800207c:	0150      	lsls	r0, r2, #5
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4641      	mov	r1, r8
 8002084:	1a51      	subs	r1, r2, r1
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	4649      	mov	r1, r9
 800208a:	eb63 0301 	sbc.w	r3, r3, r1
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800209c:	4659      	mov	r1, fp
 800209e:	018b      	lsls	r3, r1, #6
 80020a0:	4651      	mov	r1, sl
 80020a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020a6:	4651      	mov	r1, sl
 80020a8:	018a      	lsls	r2, r1, #6
 80020aa:	4651      	mov	r1, sl
 80020ac:	1a54      	subs	r4, r2, r1
 80020ae:	4659      	mov	r1, fp
 80020b0:	eb63 0501 	sbc.w	r5, r3, r1
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	00eb      	lsls	r3, r5, #3
 80020be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020c2:	00e2      	lsls	r2, r4, #3
 80020c4:	4614      	mov	r4, r2
 80020c6:	461d      	mov	r5, r3
 80020c8:	4643      	mov	r3, r8
 80020ca:	18e3      	adds	r3, r4, r3
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	464b      	mov	r3, r9
 80020d0:	eb45 0303 	adc.w	r3, r5, r3
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020e2:	4629      	mov	r1, r5
 80020e4:	028b      	lsls	r3, r1, #10
 80020e6:	4621      	mov	r1, r4
 80020e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020ec:	4621      	mov	r1, r4
 80020ee:	028a      	lsls	r2, r1, #10
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020f8:	2200      	movs	r2, #0
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80020fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002102:	f7fe fccb 	bl	8000a9c <__aeabi_uldivmod>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4613      	mov	r3, r2
 800210c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCC_GetSysClockFreq+0x458>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	0f1b      	lsrs	r3, r3, #28
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800211e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800212e:	e003      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002136:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002138:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800213c:	4618      	mov	r0, r3
 800213e:	37b8      	adds	r7, #184	; 0xb8
 8002140:	46bd      	mov	sp, r7
 8002142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	00f42400 	.word	0x00f42400

08002150 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e28d      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8083 	beq.w	8002276 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002170:	4b94      	ldr	r3, [pc, #592]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b04      	cmp	r3, #4
 800217a:	d019      	beq.n	80021b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800217c:	4b91      	ldr	r3, [pc, #580]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002184:	2b08      	cmp	r3, #8
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002188:	4b8e      	ldr	r3, [pc, #568]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002194:	d00c      	beq.n	80021b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	4b8b      	ldr	r3, [pc, #556]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d112      	bne.n	80021c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ae:	d10b      	bne.n	80021c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	4b84      	ldr	r3, [pc, #528]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d05b      	beq.n	8002274 <HAL_RCC_OscConfig+0x124>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d157      	bne.n	8002274 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e25a      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d0:	d106      	bne.n	80021e0 <HAL_RCC_OscConfig+0x90>
 80021d2:	4b7c      	ldr	r3, [pc, #496]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a7b      	ldr	r2, [pc, #492]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e01d      	b.n	800221c <HAL_RCC_OscConfig+0xcc>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0xb4>
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a75      	ldr	r2, [pc, #468]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a72      	ldr	r2, [pc, #456]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0xcc>
 8002204:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6e      	ldr	r2, [pc, #440]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b6c      	ldr	r3, [pc, #432]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a6b      	ldr	r2, [pc, #428]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7ff f96e 	bl	8001504 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222c:	f7ff f96a 	bl	8001504 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e21f      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0xdc>
 800224a:	e014      	b.n	8002276 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7ff f95a 	bl	8001504 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff f956 	bl	8001504 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e20b      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	4b57      	ldr	r3, [pc, #348]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x104>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d06f      	beq.n	8002362 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002282:	4b50      	ldr	r3, [pc, #320]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b00      	cmp	r3, #0
 800228c:	d017      	beq.n	80022be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800228e:	4b4d      	ldr	r3, [pc, #308]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002296:	2b08      	cmp	r3, #8
 8002298:	d105      	bne.n	80022a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x186>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1d3      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4937      	ldr	r1, [pc, #220]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e03a      	b.n	8002362 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_RCC_OscConfig+0x278>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7ff f903 	bl	8001504 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002302:	f7ff f8ff 	bl	8001504 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1b4      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4925      	ldr	r1, [pc, #148]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e015      	b.n	8002362 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_OscConfig+0x278>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7ff f8e2 	bl	8001504 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002344:	f7ff f8de 	bl	8001504 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e193      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d036      	beq.n	80023dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7ff f8c2 	bl	8001504 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002384:	f7ff f8be 	bl	8001504 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e173      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x234>
 80023a2:	e01b      	b.n	80023dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7ff f8ab 	bl	8001504 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	e00e      	b.n	80023d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b2:	f7ff f8a7 	bl	8001504 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d907      	bls.n	80023d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e15c      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	42470000 	.word	0x42470000
 80023cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d0:	4b8a      	ldr	r3, [pc, #552]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 80023d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ea      	bne.n	80023b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8097 	beq.w	8002518 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ee:	4b83      	ldr	r3, [pc, #524]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10f      	bne.n	800241a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b7f      	ldr	r3, [pc, #508]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a7e      	ldr	r2, [pc, #504]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b7c      	ldr	r3, [pc, #496]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b79      	ldr	r3, [pc, #484]	; (8002600 <HAL_RCC_OscConfig+0x4b0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b76      	ldr	r3, [pc, #472]	; (8002600 <HAL_RCC_OscConfig+0x4b0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a75      	ldr	r2, [pc, #468]	; (8002600 <HAL_RCC_OscConfig+0x4b0>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7ff f867 	bl	8001504 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7ff f863 	bl	8001504 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e118      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <HAL_RCC_OscConfig+0x4b0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x31e>
 8002460:	4b66      	ldr	r3, [pc, #408]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a65      	ldr	r2, [pc, #404]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	e01c      	b.n	80024a8 <HAL_RCC_OscConfig+0x358>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b05      	cmp	r3, #5
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x340>
 8002476:	4b61      	ldr	r3, [pc, #388]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a60      	ldr	r2, [pc, #384]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a5d      	ldr	r2, [pc, #372]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0x358>
 8002490:	4b5a      	ldr	r3, [pc, #360]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a59      	ldr	r2, [pc, #356]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
 800249c:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a56      	ldr	r2, [pc, #344]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 80024a2:	f023 0304 	bic.w	r3, r3, #4
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d015      	beq.n	80024dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7ff f828 	bl	8001504 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7ff f824 	bl	8001504 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0d7      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ce:	4b4b      	ldr	r3, [pc, #300]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ee      	beq.n	80024b8 <HAL_RCC_OscConfig+0x368>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7ff f812 	bl	8001504 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7ff f80e 	bl	8001504 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e0c1      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	4b40      	ldr	r3, [pc, #256]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ee      	bne.n	80024e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	4a3a      	ldr	r2, [pc, #232]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80ad 	beq.w	800267c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002522:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d060      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d145      	bne.n	80025c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b33      	ldr	r3, [pc, #204]	; (8002604 <HAL_RCC_OscConfig+0x4b4>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe ffe2 	bl	8001504 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe ffde 	bl	8001504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e093      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	019b      	lsls	r3, r3, #6
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	3b01      	subs	r3, #1
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	071b      	lsls	r3, r3, #28
 800258e:	491b      	ldr	r1, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCC_OscConfig+0x4b4>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe ffb3 	bl	8001504 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe ffaf 	bl	8001504 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e064      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x452>
 80025c0:	e05c      	b.n	800267c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_RCC_OscConfig+0x4b4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe ff9c 	bl	8001504 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe ff98 	bl	8001504 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e04d      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x480>
 80025ee:	e045      	b.n	800267c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e040      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
 80025fc:	40023800 	.word	0x40023800
 8002600:	40007000 	.word	0x40007000
 8002604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002608:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <HAL_RCC_OscConfig+0x538>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d030      	beq.n	8002678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d129      	bne.n	8002678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d122      	bne.n	8002678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800263e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002640:	4293      	cmp	r3, r2
 8002642:	d119      	bne.n	8002678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d10f      	bne.n	8002678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d107      	bne.n	8002678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e041      	b.n	8002722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fdba 	bl	800122c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f000 f95e 	bl	800298c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d001      	beq.n	8002744 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e046      	b.n	80027d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <HAL_TIM_Base_Start+0xb4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d022      	beq.n	800279c <HAL_TIM_Base_Start+0x70>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275e:	d01d      	beq.n	800279c <HAL_TIM_Base_Start+0x70>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_TIM_Base_Start+0xb8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d018      	beq.n	800279c <HAL_TIM_Base_Start+0x70>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_TIM_Base_Start+0xbc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_TIM_Base_Start+0x70>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_TIM_Base_Start+0xc0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00e      	beq.n	800279c <HAL_TIM_Base_Start+0x70>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_TIM_Base_Start+0xc4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_TIM_Base_Start+0x70>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <HAL_TIM_Base_Start+0xc8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <HAL_TIM_Base_Start+0x70>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_TIM_Base_Start+0xcc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d111      	bne.n	80027c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d010      	beq.n	80027d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027be:	e007      	b.n	80027d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800
 80027ec:	40000c00 	.word	0x40000c00
 80027f0:	40010400 	.word	0x40010400
 80027f4:	40014000 	.word	0x40014000
 80027f8:	40001800 	.word	0x40001800

080027fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_TIM_ConfigClockSource+0x1c>
 8002814:	2302      	movs	r3, #2
 8002816:	e0b4      	b.n	8002982 <HAL_TIM_ConfigClockSource+0x186>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800283e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002850:	d03e      	beq.n	80028d0 <HAL_TIM_ConfigClockSource+0xd4>
 8002852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002856:	f200 8087 	bhi.w	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 800285a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285e:	f000 8086 	beq.w	800296e <HAL_TIM_ConfigClockSource+0x172>
 8002862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002866:	d87f      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b70      	cmp	r3, #112	; 0x70
 800286a:	d01a      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0xa6>
 800286c:	2b70      	cmp	r3, #112	; 0x70
 800286e:	d87b      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b60      	cmp	r3, #96	; 0x60
 8002872:	d050      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x11a>
 8002874:	2b60      	cmp	r3, #96	; 0x60
 8002876:	d877      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002878:	2b50      	cmp	r3, #80	; 0x50
 800287a:	d03c      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0xfa>
 800287c:	2b50      	cmp	r3, #80	; 0x50
 800287e:	d873      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d058      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x13a>
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d86f      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b30      	cmp	r3, #48	; 0x30
 800288a:	d064      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15a>
 800288c:	2b30      	cmp	r3, #48	; 0x30
 800288e:	d86b      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b20      	cmp	r3, #32
 8002892:	d060      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15a>
 8002894:	2b20      	cmp	r3, #32
 8002896:	d867      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d05c      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15a>
 800289c:	2b10      	cmp	r3, #16
 800289e:	d05a      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15a>
 80028a0:	e062      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6899      	ldr	r1, [r3, #8]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f000 f985 	bl	8002bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	609a      	str	r2, [r3, #8]
      break;
 80028ce:	e04f      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f000 f96e 	bl	8002bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028f2:	609a      	str	r2, [r3, #8]
      break;
 80028f4:	e03c      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	461a      	mov	r2, r3
 8002904:	f000 f8e2 	bl	8002acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2150      	movs	r1, #80	; 0x50
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f93b 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 8002914:	e02c      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	461a      	mov	r2, r3
 8002924:	f000 f901 	bl	8002b2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2160      	movs	r1, #96	; 0x60
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f92b 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 8002934:	e01c      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f000 f8c2 	bl	8002acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2140      	movs	r1, #64	; 0x40
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f91b 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 8002954:	e00c      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f000 f912 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 8002966:	e003      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      break;
 800296c:	e000      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800296e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a40      	ldr	r2, [pc, #256]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d00f      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3d      	ldr	r2, [pc, #244]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00b      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3c      	ldr	r2, [pc, #240]	; (8002aa8 <TIM_Base_SetConfig+0x11c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <TIM_Base_SetConfig+0x120>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3a      	ldr	r2, [pc, #232]	; (8002ab0 <TIM_Base_SetConfig+0x124>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d108      	bne.n	80029de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d02b      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d027      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a2c      	ldr	r2, [pc, #176]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d023      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a2b      	ldr	r2, [pc, #172]	; (8002aa8 <TIM_Base_SetConfig+0x11c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01f      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <TIM_Base_SetConfig+0x120>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01b      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <TIM_Base_SetConfig+0x124>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d017      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a28      	ldr	r2, [pc, #160]	; (8002ab4 <TIM_Base_SetConfig+0x128>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <TIM_Base_SetConfig+0x12c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00f      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <TIM_Base_SetConfig+0x130>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <TIM_Base_SetConfig+0x134>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <TIM_Base_SetConfig+0x138>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <TIM_Base_SetConfig+0x13c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <TIM_Base_SetConfig+0xf8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <TIM_Base_SetConfig+0x124>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d103      	bne.n	8002a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	615a      	str	r2, [r3, #20]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40000c00 	.word	0x40000c00
 8002ab0:	40010400 	.word	0x40010400
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	40014400 	.word	0x40014400
 8002abc:	40014800 	.word	0x40014800
 8002ac0:	40001800 	.word	0x40001800
 8002ac4:	40001c00 	.word	0x40001c00
 8002ac8:	40002000 	.word	0x40002000

08002acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0201 	bic.w	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f023 030a 	bic.w	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0210 	bic.w	r2, r3, #16
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	031b      	lsls	r3, r3, #12
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f043 0307 	orr.w	r3, r3, #7
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	021a      	lsls	r2, r3, #8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	609a      	str	r2, [r3, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e05a      	b.n	8002cce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a21      	ldr	r2, [pc, #132]	; (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d01d      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d018      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d10c      	bne.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40000c00 	.word	0x40000c00
 8002cec:	40010400 	.word	0x40010400
 8002cf0:	40014000 	.word	0x40014000
 8002cf4:	40001800 	.word	0x40001800

08002cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e03f      	b.n	8002d8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe faa6 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2224      	movs	r2, #36	; 0x24
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f929 	bl	8002f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b08a      	sub	sp, #40	; 0x28
 8002d96:	af02      	add	r7, sp, #8
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d17c      	bne.n	8002eac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_UART_Transmit+0x2c>
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e075      	b.n	8002eae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_UART_Transmit+0x3e>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e06e      	b.n	8002eae <HAL_UART_Transmit+0x11c>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2221      	movs	r2, #33	; 0x21
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002de6:	f7fe fb8d 	bl	8001504 <HAL_GetTick>
 8002dea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	88fa      	ldrh	r2, [r7, #6]
 8002df0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	88fa      	ldrh	r2, [r7, #6]
 8002df6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e00:	d108      	bne.n	8002e14 <HAL_UART_Transmit+0x82>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d104      	bne.n	8002e14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	e003      	b.n	8002e1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e24:	e02a      	b.n	8002e7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f840 	bl	8002eb6 <UART_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e036      	b.n	8002eae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10b      	bne.n	8002e5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	3302      	adds	r3, #2
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	e007      	b.n	8002e6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1cf      	bne.n	8002e26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2140      	movs	r1, #64	; 0x40
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f810 	bl	8002eb6 <UART_WaitOnFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e006      	b.n	8002eae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b090      	sub	sp, #64	; 0x40
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec6:	e050      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d04c      	beq.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed6:	f7fe fb15 	bl	8001504 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d241      	bcs.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	e853 3f00 	ldrex	r3, [r3]
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f06:	637a      	str	r2, [r7, #52]	; 0x34
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e5      	bne.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3314      	adds	r3, #20
 8002f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3314      	adds	r3, #20
 8002f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f3a:	623a      	str	r2, [r7, #32]
 8002f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3e:	69f9      	ldr	r1, [r7, #28]
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	e841 2300 	strex	r3, r2, [r1]
 8002f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e5      	bne.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e00f      	b.n	8002f8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d09f      	beq.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3740      	adds	r7, #64	; 0x40
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f98:	b0c0      	sub	sp, #256	; 0x100
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	68d9      	ldr	r1, [r3, #12]
 8002fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	ea40 0301 	orr.w	r3, r0, r1
 8002fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fec:	f021 010c 	bic.w	r1, r1, #12
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300e:	6999      	ldr	r1, [r3, #24]
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	ea40 0301 	orr.w	r3, r0, r1
 800301a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4b8f      	ldr	r3, [pc, #572]	; (8003260 <UART_SetConfig+0x2cc>)
 8003024:	429a      	cmp	r2, r3
 8003026:	d005      	beq.n	8003034 <UART_SetConfig+0xa0>
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b8d      	ldr	r3, [pc, #564]	; (8003264 <UART_SetConfig+0x2d0>)
 8003030:	429a      	cmp	r2, r3
 8003032:	d104      	bne.n	800303e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003034:	f7fe fe48 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 8003038:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800303c:	e003      	b.n	8003046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800303e:	f7fe fe2f 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
 8003042:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003050:	f040 810c 	bne.w	800326c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003058:	2200      	movs	r2, #0
 800305a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800305e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003066:	4622      	mov	r2, r4
 8003068:	462b      	mov	r3, r5
 800306a:	1891      	adds	r1, r2, r2
 800306c:	65b9      	str	r1, [r7, #88]	; 0x58
 800306e:	415b      	adcs	r3, r3
 8003070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003076:	4621      	mov	r1, r4
 8003078:	eb12 0801 	adds.w	r8, r2, r1
 800307c:	4629      	mov	r1, r5
 800307e:	eb43 0901 	adc.w	r9, r3, r1
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003096:	4690      	mov	r8, r2
 8003098:	4699      	mov	r9, r3
 800309a:	4623      	mov	r3, r4
 800309c:	eb18 0303 	adds.w	r3, r8, r3
 80030a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030a4:	462b      	mov	r3, r5
 80030a6:	eb49 0303 	adc.w	r3, r9, r3
 80030aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030c2:	460b      	mov	r3, r1
 80030c4:	18db      	adds	r3, r3, r3
 80030c6:	653b      	str	r3, [r7, #80]	; 0x50
 80030c8:	4613      	mov	r3, r2
 80030ca:	eb42 0303 	adc.w	r3, r2, r3
 80030ce:	657b      	str	r3, [r7, #84]	; 0x54
 80030d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030d8:	f7fd fce0 	bl	8000a9c <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4b61      	ldr	r3, [pc, #388]	; (8003268 <UART_SetConfig+0x2d4>)
 80030e2:	fba3 2302 	umull	r2, r3, r3, r2
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	011c      	lsls	r4, r3, #4
 80030ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	1891      	adds	r1, r2, r2
 8003102:	64b9      	str	r1, [r7, #72]	; 0x48
 8003104:	415b      	adcs	r3, r3
 8003106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800310c:	4641      	mov	r1, r8
 800310e:	eb12 0a01 	adds.w	sl, r2, r1
 8003112:	4649      	mov	r1, r9
 8003114:	eb43 0b01 	adc.w	fp, r3, r1
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800312c:	4692      	mov	sl, r2
 800312e:	469b      	mov	fp, r3
 8003130:	4643      	mov	r3, r8
 8003132:	eb1a 0303 	adds.w	r3, sl, r3
 8003136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800313a:	464b      	mov	r3, r9
 800313c:	eb4b 0303 	adc.w	r3, fp, r3
 8003140:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003150:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003158:	460b      	mov	r3, r1
 800315a:	18db      	adds	r3, r3, r3
 800315c:	643b      	str	r3, [r7, #64]	; 0x40
 800315e:	4613      	mov	r3, r2
 8003160:	eb42 0303 	adc.w	r3, r2, r3
 8003164:	647b      	str	r3, [r7, #68]	; 0x44
 8003166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800316a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800316e:	f7fd fc95 	bl	8000a9c <__aeabi_uldivmod>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4611      	mov	r1, r2
 8003178:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <UART_SetConfig+0x2d4>)
 800317a:	fba3 2301 	umull	r2, r3, r3, r1
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2264      	movs	r2, #100	; 0x64
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	1acb      	subs	r3, r1, r3
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800318e:	4b36      	ldr	r3, [pc, #216]	; (8003268 <UART_SetConfig+0x2d4>)
 8003190:	fba3 2302 	umull	r2, r3, r3, r2
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800319c:	441c      	add	r4, r3
 800319e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	1891      	adds	r1, r2, r2
 80031b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80031b8:	415b      	adcs	r3, r3
 80031ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031c0:	4641      	mov	r1, r8
 80031c2:	1851      	adds	r1, r2, r1
 80031c4:	6339      	str	r1, [r7, #48]	; 0x30
 80031c6:	4649      	mov	r1, r9
 80031c8:	414b      	adcs	r3, r1
 80031ca:	637b      	str	r3, [r7, #52]	; 0x34
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031d8:	4659      	mov	r1, fp
 80031da:	00cb      	lsls	r3, r1, #3
 80031dc:	4651      	mov	r1, sl
 80031de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031e2:	4651      	mov	r1, sl
 80031e4:	00ca      	lsls	r2, r1, #3
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	4642      	mov	r2, r8
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031f4:	464b      	mov	r3, r9
 80031f6:	460a      	mov	r2, r1
 80031f8:	eb42 0303 	adc.w	r3, r2, r3
 80031fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800320c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003214:	460b      	mov	r3, r1
 8003216:	18db      	adds	r3, r3, r3
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
 800321a:	4613      	mov	r3, r2
 800321c:	eb42 0303 	adc.w	r3, r2, r3
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800322a:	f7fd fc37 	bl	8000a9c <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <UART_SetConfig+0x2d4>)
 8003234:	fba3 1302 	umull	r1, r3, r3, r2
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	2164      	movs	r1, #100	; 0x64
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	3332      	adds	r3, #50	; 0x32
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <UART_SetConfig+0x2d4>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	f003 0207 	and.w	r2, r3, #7
 8003252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4422      	add	r2, r4
 800325a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800325c:	e105      	b.n	800346a <UART_SetConfig+0x4d6>
 800325e:	bf00      	nop
 8003260:	40011000 	.word	0x40011000
 8003264:	40011400 	.word	0x40011400
 8003268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800326c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003270:	2200      	movs	r2, #0
 8003272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003276:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800327a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800327e:	4642      	mov	r2, r8
 8003280:	464b      	mov	r3, r9
 8003282:	1891      	adds	r1, r2, r2
 8003284:	6239      	str	r1, [r7, #32]
 8003286:	415b      	adcs	r3, r3
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
 800328a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800328e:	4641      	mov	r1, r8
 8003290:	1854      	adds	r4, r2, r1
 8003292:	4649      	mov	r1, r9
 8003294:	eb43 0501 	adc.w	r5, r3, r1
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	00eb      	lsls	r3, r5, #3
 80032a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a6:	00e2      	lsls	r2, r4, #3
 80032a8:	4614      	mov	r4, r2
 80032aa:	461d      	mov	r5, r3
 80032ac:	4643      	mov	r3, r8
 80032ae:	18e3      	adds	r3, r4, r3
 80032b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032b4:	464b      	mov	r3, r9
 80032b6:	eb45 0303 	adc.w	r3, r5, r3
 80032ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032da:	4629      	mov	r1, r5
 80032dc:	008b      	lsls	r3, r1, #2
 80032de:	4621      	mov	r1, r4
 80032e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e4:	4621      	mov	r1, r4
 80032e6:	008a      	lsls	r2, r1, #2
 80032e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032ec:	f7fd fbd6 	bl	8000a9c <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4b60      	ldr	r3, [pc, #384]	; (8003478 <UART_SetConfig+0x4e4>)
 80032f6:	fba3 2302 	umull	r2, r3, r3, r2
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	011c      	lsls	r4, r3, #4
 80032fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003302:	2200      	movs	r2, #0
 8003304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003308:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800330c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003310:	4642      	mov	r2, r8
 8003312:	464b      	mov	r3, r9
 8003314:	1891      	adds	r1, r2, r2
 8003316:	61b9      	str	r1, [r7, #24]
 8003318:	415b      	adcs	r3, r3
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003320:	4641      	mov	r1, r8
 8003322:	1851      	adds	r1, r2, r1
 8003324:	6139      	str	r1, [r7, #16]
 8003326:	4649      	mov	r1, r9
 8003328:	414b      	adcs	r3, r1
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003338:	4659      	mov	r1, fp
 800333a:	00cb      	lsls	r3, r1, #3
 800333c:	4651      	mov	r1, sl
 800333e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003342:	4651      	mov	r1, sl
 8003344:	00ca      	lsls	r2, r1, #3
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	4603      	mov	r3, r0
 800334c:	4642      	mov	r2, r8
 800334e:	189b      	adds	r3, r3, r2
 8003350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003354:	464b      	mov	r3, r9
 8003356:	460a      	mov	r2, r1
 8003358:	eb42 0303 	adc.w	r3, r2, r3
 800335c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	67bb      	str	r3, [r7, #120]	; 0x78
 800336a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003378:	4649      	mov	r1, r9
 800337a:	008b      	lsls	r3, r1, #2
 800337c:	4641      	mov	r1, r8
 800337e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003382:	4641      	mov	r1, r8
 8003384:	008a      	lsls	r2, r1, #2
 8003386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800338a:	f7fd fb87 	bl	8000a9c <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4b39      	ldr	r3, [pc, #228]	; (8003478 <UART_SetConfig+0x4e4>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2164      	movs	r1, #100	; 0x64
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	3332      	adds	r3, #50	; 0x32
 80033a6:	4a34      	ldr	r2, [pc, #208]	; (8003478 <UART_SetConfig+0x4e4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b2:	441c      	add	r4, r3
 80033b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033b8:	2200      	movs	r2, #0
 80033ba:	673b      	str	r3, [r7, #112]	; 0x70
 80033bc:	677a      	str	r2, [r7, #116]	; 0x74
 80033be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033c2:	4642      	mov	r2, r8
 80033c4:	464b      	mov	r3, r9
 80033c6:	1891      	adds	r1, r2, r2
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	415b      	adcs	r3, r3
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d2:	4641      	mov	r1, r8
 80033d4:	1851      	adds	r1, r2, r1
 80033d6:	6039      	str	r1, [r7, #0]
 80033d8:	4649      	mov	r1, r9
 80033da:	414b      	adcs	r3, r1
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033ea:	4659      	mov	r1, fp
 80033ec:	00cb      	lsls	r3, r1, #3
 80033ee:	4651      	mov	r1, sl
 80033f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033f4:	4651      	mov	r1, sl
 80033f6:	00ca      	lsls	r2, r1, #3
 80033f8:	4610      	mov	r0, r2
 80033fa:	4619      	mov	r1, r3
 80033fc:	4603      	mov	r3, r0
 80033fe:	4642      	mov	r2, r8
 8003400:	189b      	adds	r3, r3, r2
 8003402:	66bb      	str	r3, [r7, #104]	; 0x68
 8003404:	464b      	mov	r3, r9
 8003406:	460a      	mov	r2, r1
 8003408:	eb42 0303 	adc.w	r3, r2, r3
 800340c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800340e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	663b      	str	r3, [r7, #96]	; 0x60
 8003418:	667a      	str	r2, [r7, #100]	; 0x64
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003426:	4649      	mov	r1, r9
 8003428:	008b      	lsls	r3, r1, #2
 800342a:	4641      	mov	r1, r8
 800342c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003430:	4641      	mov	r1, r8
 8003432:	008a      	lsls	r2, r1, #2
 8003434:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003438:	f7fd fb30 	bl	8000a9c <__aeabi_uldivmod>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <UART_SetConfig+0x4e4>)
 8003442:	fba3 1302 	umull	r1, r3, r3, r2
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2164      	movs	r1, #100	; 0x64
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	3332      	adds	r3, #50	; 0x32
 8003454:	4a08      	ldr	r2, [pc, #32]	; (8003478 <UART_SetConfig+0x4e4>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4422      	add	r2, r4
 8003468:	609a      	str	r2, [r3, #8]
}
 800346a:	bf00      	nop
 800346c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003470:	46bd      	mov	sp, r7
 8003472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003476:	bf00      	nop
 8003478:	51eb851f 	.word	0x51eb851f

0800347c <__errno>:
 800347c:	4b01      	ldr	r3, [pc, #4]	; (8003484 <__errno+0x8>)
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000000c 	.word	0x2000000c

08003488 <__libc_init_array>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	4d0d      	ldr	r5, [pc, #52]	; (80034c0 <__libc_init_array+0x38>)
 800348c:	4c0d      	ldr	r4, [pc, #52]	; (80034c4 <__libc_init_array+0x3c>)
 800348e:	1b64      	subs	r4, r4, r5
 8003490:	10a4      	asrs	r4, r4, #2
 8003492:	2600      	movs	r6, #0
 8003494:	42a6      	cmp	r6, r4
 8003496:	d109      	bne.n	80034ac <__libc_init_array+0x24>
 8003498:	4d0b      	ldr	r5, [pc, #44]	; (80034c8 <__libc_init_array+0x40>)
 800349a:	4c0c      	ldr	r4, [pc, #48]	; (80034cc <__libc_init_array+0x44>)
 800349c:	f000 fc8e 	bl	8003dbc <_init>
 80034a0:	1b64      	subs	r4, r4, r5
 80034a2:	10a4      	asrs	r4, r4, #2
 80034a4:	2600      	movs	r6, #0
 80034a6:	42a6      	cmp	r6, r4
 80034a8:	d105      	bne.n	80034b6 <__libc_init_array+0x2e>
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b0:	4798      	blx	r3
 80034b2:	3601      	adds	r6, #1
 80034b4:	e7ee      	b.n	8003494 <__libc_init_array+0xc>
 80034b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ba:	4798      	blx	r3
 80034bc:	3601      	adds	r6, #1
 80034be:	e7f2      	b.n	80034a6 <__libc_init_array+0x1e>
 80034c0:	08003e34 	.word	0x08003e34
 80034c4:	08003e34 	.word	0x08003e34
 80034c8:	08003e34 	.word	0x08003e34
 80034cc:	08003e38 	.word	0x08003e38

080034d0 <memset>:
 80034d0:	4402      	add	r2, r0
 80034d2:	4603      	mov	r3, r0
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d100      	bne.n	80034da <memset+0xa>
 80034d8:	4770      	bx	lr
 80034da:	f803 1b01 	strb.w	r1, [r3], #1
 80034de:	e7f9      	b.n	80034d4 <memset+0x4>

080034e0 <siprintf>:
 80034e0:	b40e      	push	{r1, r2, r3}
 80034e2:	b500      	push	{lr}
 80034e4:	b09c      	sub	sp, #112	; 0x70
 80034e6:	ab1d      	add	r3, sp, #116	; 0x74
 80034e8:	9002      	str	r0, [sp, #8]
 80034ea:	9006      	str	r0, [sp, #24]
 80034ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034f0:	4809      	ldr	r0, [pc, #36]	; (8003518 <siprintf+0x38>)
 80034f2:	9107      	str	r1, [sp, #28]
 80034f4:	9104      	str	r1, [sp, #16]
 80034f6:	4909      	ldr	r1, [pc, #36]	; (800351c <siprintf+0x3c>)
 80034f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80034fc:	9105      	str	r1, [sp, #20]
 80034fe:	6800      	ldr	r0, [r0, #0]
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	a902      	add	r1, sp, #8
 8003504:	f000 f868 	bl	80035d8 <_svfiprintf_r>
 8003508:	9b02      	ldr	r3, [sp, #8]
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	b01c      	add	sp, #112	; 0x70
 8003510:	f85d eb04 	ldr.w	lr, [sp], #4
 8003514:	b003      	add	sp, #12
 8003516:	4770      	bx	lr
 8003518:	2000000c 	.word	0x2000000c
 800351c:	ffff0208 	.word	0xffff0208

08003520 <__ssputs_r>:
 8003520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003524:	688e      	ldr	r6, [r1, #8]
 8003526:	429e      	cmp	r6, r3
 8003528:	4682      	mov	sl, r0
 800352a:	460c      	mov	r4, r1
 800352c:	4690      	mov	r8, r2
 800352e:	461f      	mov	r7, r3
 8003530:	d838      	bhi.n	80035a4 <__ssputs_r+0x84>
 8003532:	898a      	ldrh	r2, [r1, #12]
 8003534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003538:	d032      	beq.n	80035a0 <__ssputs_r+0x80>
 800353a:	6825      	ldr	r5, [r4, #0]
 800353c:	6909      	ldr	r1, [r1, #16]
 800353e:	eba5 0901 	sub.w	r9, r5, r1
 8003542:	6965      	ldr	r5, [r4, #20]
 8003544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800354c:	3301      	adds	r3, #1
 800354e:	444b      	add	r3, r9
 8003550:	106d      	asrs	r5, r5, #1
 8003552:	429d      	cmp	r5, r3
 8003554:	bf38      	it	cc
 8003556:	461d      	movcc	r5, r3
 8003558:	0553      	lsls	r3, r2, #21
 800355a:	d531      	bpl.n	80035c0 <__ssputs_r+0xa0>
 800355c:	4629      	mov	r1, r5
 800355e:	f000 fb63 	bl	8003c28 <_malloc_r>
 8003562:	4606      	mov	r6, r0
 8003564:	b950      	cbnz	r0, 800357c <__ssputs_r+0x5c>
 8003566:	230c      	movs	r3, #12
 8003568:	f8ca 3000 	str.w	r3, [sl]
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003572:	81a3      	strh	r3, [r4, #12]
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357c:	6921      	ldr	r1, [r4, #16]
 800357e:	464a      	mov	r2, r9
 8003580:	f000 fabe 	bl	8003b00 <memcpy>
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800358a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358e:	81a3      	strh	r3, [r4, #12]
 8003590:	6126      	str	r6, [r4, #16]
 8003592:	6165      	str	r5, [r4, #20]
 8003594:	444e      	add	r6, r9
 8003596:	eba5 0509 	sub.w	r5, r5, r9
 800359a:	6026      	str	r6, [r4, #0]
 800359c:	60a5      	str	r5, [r4, #8]
 800359e:	463e      	mov	r6, r7
 80035a0:	42be      	cmp	r6, r7
 80035a2:	d900      	bls.n	80035a6 <__ssputs_r+0x86>
 80035a4:	463e      	mov	r6, r7
 80035a6:	6820      	ldr	r0, [r4, #0]
 80035a8:	4632      	mov	r2, r6
 80035aa:	4641      	mov	r1, r8
 80035ac:	f000 fab6 	bl	8003b1c <memmove>
 80035b0:	68a3      	ldr	r3, [r4, #8]
 80035b2:	1b9b      	subs	r3, r3, r6
 80035b4:	60a3      	str	r3, [r4, #8]
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	4433      	add	r3, r6
 80035ba:	6023      	str	r3, [r4, #0]
 80035bc:	2000      	movs	r0, #0
 80035be:	e7db      	b.n	8003578 <__ssputs_r+0x58>
 80035c0:	462a      	mov	r2, r5
 80035c2:	f000 fba5 	bl	8003d10 <_realloc_r>
 80035c6:	4606      	mov	r6, r0
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d1e1      	bne.n	8003590 <__ssputs_r+0x70>
 80035cc:	6921      	ldr	r1, [r4, #16]
 80035ce:	4650      	mov	r0, sl
 80035d0:	f000 fabe 	bl	8003b50 <_free_r>
 80035d4:	e7c7      	b.n	8003566 <__ssputs_r+0x46>
	...

080035d8 <_svfiprintf_r>:
 80035d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035dc:	4698      	mov	r8, r3
 80035de:	898b      	ldrh	r3, [r1, #12]
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	b09d      	sub	sp, #116	; 0x74
 80035e4:	4607      	mov	r7, r0
 80035e6:	460d      	mov	r5, r1
 80035e8:	4614      	mov	r4, r2
 80035ea:	d50e      	bpl.n	800360a <_svfiprintf_r+0x32>
 80035ec:	690b      	ldr	r3, [r1, #16]
 80035ee:	b963      	cbnz	r3, 800360a <_svfiprintf_r+0x32>
 80035f0:	2140      	movs	r1, #64	; 0x40
 80035f2:	f000 fb19 	bl	8003c28 <_malloc_r>
 80035f6:	6028      	str	r0, [r5, #0]
 80035f8:	6128      	str	r0, [r5, #16]
 80035fa:	b920      	cbnz	r0, 8003606 <_svfiprintf_r+0x2e>
 80035fc:	230c      	movs	r3, #12
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	e0d1      	b.n	80037aa <_svfiprintf_r+0x1d2>
 8003606:	2340      	movs	r3, #64	; 0x40
 8003608:	616b      	str	r3, [r5, #20]
 800360a:	2300      	movs	r3, #0
 800360c:	9309      	str	r3, [sp, #36]	; 0x24
 800360e:	2320      	movs	r3, #32
 8003610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003614:	f8cd 800c 	str.w	r8, [sp, #12]
 8003618:	2330      	movs	r3, #48	; 0x30
 800361a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80037c4 <_svfiprintf_r+0x1ec>
 800361e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003622:	f04f 0901 	mov.w	r9, #1
 8003626:	4623      	mov	r3, r4
 8003628:	469a      	mov	sl, r3
 800362a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800362e:	b10a      	cbz	r2, 8003634 <_svfiprintf_r+0x5c>
 8003630:	2a25      	cmp	r2, #37	; 0x25
 8003632:	d1f9      	bne.n	8003628 <_svfiprintf_r+0x50>
 8003634:	ebba 0b04 	subs.w	fp, sl, r4
 8003638:	d00b      	beq.n	8003652 <_svfiprintf_r+0x7a>
 800363a:	465b      	mov	r3, fp
 800363c:	4622      	mov	r2, r4
 800363e:	4629      	mov	r1, r5
 8003640:	4638      	mov	r0, r7
 8003642:	f7ff ff6d 	bl	8003520 <__ssputs_r>
 8003646:	3001      	adds	r0, #1
 8003648:	f000 80aa 	beq.w	80037a0 <_svfiprintf_r+0x1c8>
 800364c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800364e:	445a      	add	r2, fp
 8003650:	9209      	str	r2, [sp, #36]	; 0x24
 8003652:	f89a 3000 	ldrb.w	r3, [sl]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80a2 	beq.w	80037a0 <_svfiprintf_r+0x1c8>
 800365c:	2300      	movs	r3, #0
 800365e:	f04f 32ff 	mov.w	r2, #4294967295
 8003662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003666:	f10a 0a01 	add.w	sl, sl, #1
 800366a:	9304      	str	r3, [sp, #16]
 800366c:	9307      	str	r3, [sp, #28]
 800366e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003672:	931a      	str	r3, [sp, #104]	; 0x68
 8003674:	4654      	mov	r4, sl
 8003676:	2205      	movs	r2, #5
 8003678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800367c:	4851      	ldr	r0, [pc, #324]	; (80037c4 <_svfiprintf_r+0x1ec>)
 800367e:	f7fc fdcf 	bl	8000220 <memchr>
 8003682:	9a04      	ldr	r2, [sp, #16]
 8003684:	b9d8      	cbnz	r0, 80036be <_svfiprintf_r+0xe6>
 8003686:	06d0      	lsls	r0, r2, #27
 8003688:	bf44      	itt	mi
 800368a:	2320      	movmi	r3, #32
 800368c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003690:	0711      	lsls	r1, r2, #28
 8003692:	bf44      	itt	mi
 8003694:	232b      	movmi	r3, #43	; 0x2b
 8003696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800369a:	f89a 3000 	ldrb.w	r3, [sl]
 800369e:	2b2a      	cmp	r3, #42	; 0x2a
 80036a0:	d015      	beq.n	80036ce <_svfiprintf_r+0xf6>
 80036a2:	9a07      	ldr	r2, [sp, #28]
 80036a4:	4654      	mov	r4, sl
 80036a6:	2000      	movs	r0, #0
 80036a8:	f04f 0c0a 	mov.w	ip, #10
 80036ac:	4621      	mov	r1, r4
 80036ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036b2:	3b30      	subs	r3, #48	; 0x30
 80036b4:	2b09      	cmp	r3, #9
 80036b6:	d94e      	bls.n	8003756 <_svfiprintf_r+0x17e>
 80036b8:	b1b0      	cbz	r0, 80036e8 <_svfiprintf_r+0x110>
 80036ba:	9207      	str	r2, [sp, #28]
 80036bc:	e014      	b.n	80036e8 <_svfiprintf_r+0x110>
 80036be:	eba0 0308 	sub.w	r3, r0, r8
 80036c2:	fa09 f303 	lsl.w	r3, r9, r3
 80036c6:	4313      	orrs	r3, r2
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	46a2      	mov	sl, r4
 80036cc:	e7d2      	b.n	8003674 <_svfiprintf_r+0x9c>
 80036ce:	9b03      	ldr	r3, [sp, #12]
 80036d0:	1d19      	adds	r1, r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	9103      	str	r1, [sp, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bfbb      	ittet	lt
 80036da:	425b      	neglt	r3, r3
 80036dc:	f042 0202 	orrlt.w	r2, r2, #2
 80036e0:	9307      	strge	r3, [sp, #28]
 80036e2:	9307      	strlt	r3, [sp, #28]
 80036e4:	bfb8      	it	lt
 80036e6:	9204      	strlt	r2, [sp, #16]
 80036e8:	7823      	ldrb	r3, [r4, #0]
 80036ea:	2b2e      	cmp	r3, #46	; 0x2e
 80036ec:	d10c      	bne.n	8003708 <_svfiprintf_r+0x130>
 80036ee:	7863      	ldrb	r3, [r4, #1]
 80036f0:	2b2a      	cmp	r3, #42	; 0x2a
 80036f2:	d135      	bne.n	8003760 <_svfiprintf_r+0x188>
 80036f4:	9b03      	ldr	r3, [sp, #12]
 80036f6:	1d1a      	adds	r2, r3, #4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	9203      	str	r2, [sp, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bfb8      	it	lt
 8003700:	f04f 33ff 	movlt.w	r3, #4294967295
 8003704:	3402      	adds	r4, #2
 8003706:	9305      	str	r3, [sp, #20]
 8003708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80037d4 <_svfiprintf_r+0x1fc>
 800370c:	7821      	ldrb	r1, [r4, #0]
 800370e:	2203      	movs	r2, #3
 8003710:	4650      	mov	r0, sl
 8003712:	f7fc fd85 	bl	8000220 <memchr>
 8003716:	b140      	cbz	r0, 800372a <_svfiprintf_r+0x152>
 8003718:	2340      	movs	r3, #64	; 0x40
 800371a:	eba0 000a 	sub.w	r0, r0, sl
 800371e:	fa03 f000 	lsl.w	r0, r3, r0
 8003722:	9b04      	ldr	r3, [sp, #16]
 8003724:	4303      	orrs	r3, r0
 8003726:	3401      	adds	r4, #1
 8003728:	9304      	str	r3, [sp, #16]
 800372a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800372e:	4826      	ldr	r0, [pc, #152]	; (80037c8 <_svfiprintf_r+0x1f0>)
 8003730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003734:	2206      	movs	r2, #6
 8003736:	f7fc fd73 	bl	8000220 <memchr>
 800373a:	2800      	cmp	r0, #0
 800373c:	d038      	beq.n	80037b0 <_svfiprintf_r+0x1d8>
 800373e:	4b23      	ldr	r3, [pc, #140]	; (80037cc <_svfiprintf_r+0x1f4>)
 8003740:	bb1b      	cbnz	r3, 800378a <_svfiprintf_r+0x1b2>
 8003742:	9b03      	ldr	r3, [sp, #12]
 8003744:	3307      	adds	r3, #7
 8003746:	f023 0307 	bic.w	r3, r3, #7
 800374a:	3308      	adds	r3, #8
 800374c:	9303      	str	r3, [sp, #12]
 800374e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003750:	4433      	add	r3, r6
 8003752:	9309      	str	r3, [sp, #36]	; 0x24
 8003754:	e767      	b.n	8003626 <_svfiprintf_r+0x4e>
 8003756:	fb0c 3202 	mla	r2, ip, r2, r3
 800375a:	460c      	mov	r4, r1
 800375c:	2001      	movs	r0, #1
 800375e:	e7a5      	b.n	80036ac <_svfiprintf_r+0xd4>
 8003760:	2300      	movs	r3, #0
 8003762:	3401      	adds	r4, #1
 8003764:	9305      	str	r3, [sp, #20]
 8003766:	4619      	mov	r1, r3
 8003768:	f04f 0c0a 	mov.w	ip, #10
 800376c:	4620      	mov	r0, r4
 800376e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003772:	3a30      	subs	r2, #48	; 0x30
 8003774:	2a09      	cmp	r2, #9
 8003776:	d903      	bls.n	8003780 <_svfiprintf_r+0x1a8>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0c5      	beq.n	8003708 <_svfiprintf_r+0x130>
 800377c:	9105      	str	r1, [sp, #20]
 800377e:	e7c3      	b.n	8003708 <_svfiprintf_r+0x130>
 8003780:	fb0c 2101 	mla	r1, ip, r1, r2
 8003784:	4604      	mov	r4, r0
 8003786:	2301      	movs	r3, #1
 8003788:	e7f0      	b.n	800376c <_svfiprintf_r+0x194>
 800378a:	ab03      	add	r3, sp, #12
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	462a      	mov	r2, r5
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <_svfiprintf_r+0x1f8>)
 8003792:	a904      	add	r1, sp, #16
 8003794:	4638      	mov	r0, r7
 8003796:	f3af 8000 	nop.w
 800379a:	1c42      	adds	r2, r0, #1
 800379c:	4606      	mov	r6, r0
 800379e:	d1d6      	bne.n	800374e <_svfiprintf_r+0x176>
 80037a0:	89ab      	ldrh	r3, [r5, #12]
 80037a2:	065b      	lsls	r3, r3, #25
 80037a4:	f53f af2c 	bmi.w	8003600 <_svfiprintf_r+0x28>
 80037a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037aa:	b01d      	add	sp, #116	; 0x74
 80037ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b0:	ab03      	add	r3, sp, #12
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	462a      	mov	r2, r5
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <_svfiprintf_r+0x1f8>)
 80037b8:	a904      	add	r1, sp, #16
 80037ba:	4638      	mov	r0, r7
 80037bc:	f000 f87a 	bl	80038b4 <_printf_i>
 80037c0:	e7eb      	b.n	800379a <_svfiprintf_r+0x1c2>
 80037c2:	bf00      	nop
 80037c4:	08003df8 	.word	0x08003df8
 80037c8:	08003e02 	.word	0x08003e02
 80037cc:	00000000 	.word	0x00000000
 80037d0:	08003521 	.word	0x08003521
 80037d4:	08003dfe 	.word	0x08003dfe

080037d8 <_printf_common>:
 80037d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037dc:	4616      	mov	r6, r2
 80037de:	4699      	mov	r9, r3
 80037e0:	688a      	ldr	r2, [r1, #8]
 80037e2:	690b      	ldr	r3, [r1, #16]
 80037e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037e8:	4293      	cmp	r3, r2
 80037ea:	bfb8      	it	lt
 80037ec:	4613      	movlt	r3, r2
 80037ee:	6033      	str	r3, [r6, #0]
 80037f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037f4:	4607      	mov	r7, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	b10a      	cbz	r2, 80037fe <_printf_common+0x26>
 80037fa:	3301      	adds	r3, #1
 80037fc:	6033      	str	r3, [r6, #0]
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	0699      	lsls	r1, r3, #26
 8003802:	bf42      	ittt	mi
 8003804:	6833      	ldrmi	r3, [r6, #0]
 8003806:	3302      	addmi	r3, #2
 8003808:	6033      	strmi	r3, [r6, #0]
 800380a:	6825      	ldr	r5, [r4, #0]
 800380c:	f015 0506 	ands.w	r5, r5, #6
 8003810:	d106      	bne.n	8003820 <_printf_common+0x48>
 8003812:	f104 0a19 	add.w	sl, r4, #25
 8003816:	68e3      	ldr	r3, [r4, #12]
 8003818:	6832      	ldr	r2, [r6, #0]
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	42ab      	cmp	r3, r5
 800381e:	dc26      	bgt.n	800386e <_printf_common+0x96>
 8003820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003824:	1e13      	subs	r3, r2, #0
 8003826:	6822      	ldr	r2, [r4, #0]
 8003828:	bf18      	it	ne
 800382a:	2301      	movne	r3, #1
 800382c:	0692      	lsls	r2, r2, #26
 800382e:	d42b      	bmi.n	8003888 <_printf_common+0xb0>
 8003830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003834:	4649      	mov	r1, r9
 8003836:	4638      	mov	r0, r7
 8003838:	47c0      	blx	r8
 800383a:	3001      	adds	r0, #1
 800383c:	d01e      	beq.n	800387c <_printf_common+0xa4>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	68e5      	ldr	r5, [r4, #12]
 8003842:	6832      	ldr	r2, [r6, #0]
 8003844:	f003 0306 	and.w	r3, r3, #6
 8003848:	2b04      	cmp	r3, #4
 800384a:	bf08      	it	eq
 800384c:	1aad      	subeq	r5, r5, r2
 800384e:	68a3      	ldr	r3, [r4, #8]
 8003850:	6922      	ldr	r2, [r4, #16]
 8003852:	bf0c      	ite	eq
 8003854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003858:	2500      	movne	r5, #0
 800385a:	4293      	cmp	r3, r2
 800385c:	bfc4      	itt	gt
 800385e:	1a9b      	subgt	r3, r3, r2
 8003860:	18ed      	addgt	r5, r5, r3
 8003862:	2600      	movs	r6, #0
 8003864:	341a      	adds	r4, #26
 8003866:	42b5      	cmp	r5, r6
 8003868:	d11a      	bne.n	80038a0 <_printf_common+0xc8>
 800386a:	2000      	movs	r0, #0
 800386c:	e008      	b.n	8003880 <_printf_common+0xa8>
 800386e:	2301      	movs	r3, #1
 8003870:	4652      	mov	r2, sl
 8003872:	4649      	mov	r1, r9
 8003874:	4638      	mov	r0, r7
 8003876:	47c0      	blx	r8
 8003878:	3001      	adds	r0, #1
 800387a:	d103      	bne.n	8003884 <_printf_common+0xac>
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003884:	3501      	adds	r5, #1
 8003886:	e7c6      	b.n	8003816 <_printf_common+0x3e>
 8003888:	18e1      	adds	r1, r4, r3
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	2030      	movs	r0, #48	; 0x30
 800388e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003892:	4422      	add	r2, r4
 8003894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800389c:	3302      	adds	r3, #2
 800389e:	e7c7      	b.n	8003830 <_printf_common+0x58>
 80038a0:	2301      	movs	r3, #1
 80038a2:	4622      	mov	r2, r4
 80038a4:	4649      	mov	r1, r9
 80038a6:	4638      	mov	r0, r7
 80038a8:	47c0      	blx	r8
 80038aa:	3001      	adds	r0, #1
 80038ac:	d0e6      	beq.n	800387c <_printf_common+0xa4>
 80038ae:	3601      	adds	r6, #1
 80038b0:	e7d9      	b.n	8003866 <_printf_common+0x8e>
	...

080038b4 <_printf_i>:
 80038b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038b8:	7e0f      	ldrb	r7, [r1, #24]
 80038ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038bc:	2f78      	cmp	r7, #120	; 0x78
 80038be:	4691      	mov	r9, r2
 80038c0:	4680      	mov	r8, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	469a      	mov	sl, r3
 80038c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038ca:	d807      	bhi.n	80038dc <_printf_i+0x28>
 80038cc:	2f62      	cmp	r7, #98	; 0x62
 80038ce:	d80a      	bhi.n	80038e6 <_printf_i+0x32>
 80038d0:	2f00      	cmp	r7, #0
 80038d2:	f000 80d8 	beq.w	8003a86 <_printf_i+0x1d2>
 80038d6:	2f58      	cmp	r7, #88	; 0x58
 80038d8:	f000 80a3 	beq.w	8003a22 <_printf_i+0x16e>
 80038dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038e4:	e03a      	b.n	800395c <_printf_i+0xa8>
 80038e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ea:	2b15      	cmp	r3, #21
 80038ec:	d8f6      	bhi.n	80038dc <_printf_i+0x28>
 80038ee:	a101      	add	r1, pc, #4	; (adr r1, 80038f4 <_printf_i+0x40>)
 80038f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038f4:	0800394d 	.word	0x0800394d
 80038f8:	08003961 	.word	0x08003961
 80038fc:	080038dd 	.word	0x080038dd
 8003900:	080038dd 	.word	0x080038dd
 8003904:	080038dd 	.word	0x080038dd
 8003908:	080038dd 	.word	0x080038dd
 800390c:	08003961 	.word	0x08003961
 8003910:	080038dd 	.word	0x080038dd
 8003914:	080038dd 	.word	0x080038dd
 8003918:	080038dd 	.word	0x080038dd
 800391c:	080038dd 	.word	0x080038dd
 8003920:	08003a6d 	.word	0x08003a6d
 8003924:	08003991 	.word	0x08003991
 8003928:	08003a4f 	.word	0x08003a4f
 800392c:	080038dd 	.word	0x080038dd
 8003930:	080038dd 	.word	0x080038dd
 8003934:	08003a8f 	.word	0x08003a8f
 8003938:	080038dd 	.word	0x080038dd
 800393c:	08003991 	.word	0x08003991
 8003940:	080038dd 	.word	0x080038dd
 8003944:	080038dd 	.word	0x080038dd
 8003948:	08003a57 	.word	0x08003a57
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	1d1a      	adds	r2, r3, #4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	602a      	str	r2, [r5, #0]
 8003954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800395c:	2301      	movs	r3, #1
 800395e:	e0a3      	b.n	8003aa8 <_printf_i+0x1f4>
 8003960:	6820      	ldr	r0, [r4, #0]
 8003962:	6829      	ldr	r1, [r5, #0]
 8003964:	0606      	lsls	r6, r0, #24
 8003966:	f101 0304 	add.w	r3, r1, #4
 800396a:	d50a      	bpl.n	8003982 <_printf_i+0xce>
 800396c:	680e      	ldr	r6, [r1, #0]
 800396e:	602b      	str	r3, [r5, #0]
 8003970:	2e00      	cmp	r6, #0
 8003972:	da03      	bge.n	800397c <_printf_i+0xc8>
 8003974:	232d      	movs	r3, #45	; 0x2d
 8003976:	4276      	negs	r6, r6
 8003978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800397c:	485e      	ldr	r0, [pc, #376]	; (8003af8 <_printf_i+0x244>)
 800397e:	230a      	movs	r3, #10
 8003980:	e019      	b.n	80039b6 <_printf_i+0x102>
 8003982:	680e      	ldr	r6, [r1, #0]
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	f010 0f40 	tst.w	r0, #64	; 0x40
 800398a:	bf18      	it	ne
 800398c:	b236      	sxthne	r6, r6
 800398e:	e7ef      	b.n	8003970 <_printf_i+0xbc>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	6820      	ldr	r0, [r4, #0]
 8003994:	1d19      	adds	r1, r3, #4
 8003996:	6029      	str	r1, [r5, #0]
 8003998:	0601      	lsls	r1, r0, #24
 800399a:	d501      	bpl.n	80039a0 <_printf_i+0xec>
 800399c:	681e      	ldr	r6, [r3, #0]
 800399e:	e002      	b.n	80039a6 <_printf_i+0xf2>
 80039a0:	0646      	lsls	r6, r0, #25
 80039a2:	d5fb      	bpl.n	800399c <_printf_i+0xe8>
 80039a4:	881e      	ldrh	r6, [r3, #0]
 80039a6:	4854      	ldr	r0, [pc, #336]	; (8003af8 <_printf_i+0x244>)
 80039a8:	2f6f      	cmp	r7, #111	; 0x6f
 80039aa:	bf0c      	ite	eq
 80039ac:	2308      	moveq	r3, #8
 80039ae:	230a      	movne	r3, #10
 80039b0:	2100      	movs	r1, #0
 80039b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039b6:	6865      	ldr	r5, [r4, #4]
 80039b8:	60a5      	str	r5, [r4, #8]
 80039ba:	2d00      	cmp	r5, #0
 80039bc:	bfa2      	ittt	ge
 80039be:	6821      	ldrge	r1, [r4, #0]
 80039c0:	f021 0104 	bicge.w	r1, r1, #4
 80039c4:	6021      	strge	r1, [r4, #0]
 80039c6:	b90e      	cbnz	r6, 80039cc <_printf_i+0x118>
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	d04d      	beq.n	8003a68 <_printf_i+0x1b4>
 80039cc:	4615      	mov	r5, r2
 80039ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80039d2:	fb03 6711 	mls	r7, r3, r1, r6
 80039d6:	5dc7      	ldrb	r7, [r0, r7]
 80039d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039dc:	4637      	mov	r7, r6
 80039de:	42bb      	cmp	r3, r7
 80039e0:	460e      	mov	r6, r1
 80039e2:	d9f4      	bls.n	80039ce <_printf_i+0x11a>
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d10b      	bne.n	8003a00 <_printf_i+0x14c>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	07de      	lsls	r6, r3, #31
 80039ec:	d508      	bpl.n	8003a00 <_printf_i+0x14c>
 80039ee:	6923      	ldr	r3, [r4, #16]
 80039f0:	6861      	ldr	r1, [r4, #4]
 80039f2:	4299      	cmp	r1, r3
 80039f4:	bfde      	ittt	le
 80039f6:	2330      	movle	r3, #48	; 0x30
 80039f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a00:	1b52      	subs	r2, r2, r5
 8003a02:	6122      	str	r2, [r4, #16]
 8003a04:	f8cd a000 	str.w	sl, [sp]
 8003a08:	464b      	mov	r3, r9
 8003a0a:	aa03      	add	r2, sp, #12
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	4640      	mov	r0, r8
 8003a10:	f7ff fee2 	bl	80037d8 <_printf_common>
 8003a14:	3001      	adds	r0, #1
 8003a16:	d14c      	bne.n	8003ab2 <_printf_i+0x1fe>
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	b004      	add	sp, #16
 8003a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a22:	4835      	ldr	r0, [pc, #212]	; (8003af8 <_printf_i+0x244>)
 8003a24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a28:	6829      	ldr	r1, [r5, #0]
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a30:	6029      	str	r1, [r5, #0]
 8003a32:	061d      	lsls	r5, r3, #24
 8003a34:	d514      	bpl.n	8003a60 <_printf_i+0x1ac>
 8003a36:	07df      	lsls	r7, r3, #31
 8003a38:	bf44      	itt	mi
 8003a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8003a3e:	6023      	strmi	r3, [r4, #0]
 8003a40:	b91e      	cbnz	r6, 8003a4a <_printf_i+0x196>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	f023 0320 	bic.w	r3, r3, #32
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	2310      	movs	r3, #16
 8003a4c:	e7b0      	b.n	80039b0 <_printf_i+0xfc>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	f043 0320 	orr.w	r3, r3, #32
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	2378      	movs	r3, #120	; 0x78
 8003a58:	4828      	ldr	r0, [pc, #160]	; (8003afc <_printf_i+0x248>)
 8003a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a5e:	e7e3      	b.n	8003a28 <_printf_i+0x174>
 8003a60:	0659      	lsls	r1, r3, #25
 8003a62:	bf48      	it	mi
 8003a64:	b2b6      	uxthmi	r6, r6
 8003a66:	e7e6      	b.n	8003a36 <_printf_i+0x182>
 8003a68:	4615      	mov	r5, r2
 8003a6a:	e7bb      	b.n	80039e4 <_printf_i+0x130>
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	6826      	ldr	r6, [r4, #0]
 8003a70:	6961      	ldr	r1, [r4, #20]
 8003a72:	1d18      	adds	r0, r3, #4
 8003a74:	6028      	str	r0, [r5, #0]
 8003a76:	0635      	lsls	r5, r6, #24
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	d501      	bpl.n	8003a80 <_printf_i+0x1cc>
 8003a7c:	6019      	str	r1, [r3, #0]
 8003a7e:	e002      	b.n	8003a86 <_printf_i+0x1d2>
 8003a80:	0670      	lsls	r0, r6, #25
 8003a82:	d5fb      	bpl.n	8003a7c <_printf_i+0x1c8>
 8003a84:	8019      	strh	r1, [r3, #0]
 8003a86:	2300      	movs	r3, #0
 8003a88:	6123      	str	r3, [r4, #16]
 8003a8a:	4615      	mov	r5, r2
 8003a8c:	e7ba      	b.n	8003a04 <_printf_i+0x150>
 8003a8e:	682b      	ldr	r3, [r5, #0]
 8003a90:	1d1a      	adds	r2, r3, #4
 8003a92:	602a      	str	r2, [r5, #0]
 8003a94:	681d      	ldr	r5, [r3, #0]
 8003a96:	6862      	ldr	r2, [r4, #4]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f7fc fbc0 	bl	8000220 <memchr>
 8003aa0:	b108      	cbz	r0, 8003aa6 <_printf_i+0x1f2>
 8003aa2:	1b40      	subs	r0, r0, r5
 8003aa4:	6060      	str	r0, [r4, #4]
 8003aa6:	6863      	ldr	r3, [r4, #4]
 8003aa8:	6123      	str	r3, [r4, #16]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab0:	e7a8      	b.n	8003a04 <_printf_i+0x150>
 8003ab2:	6923      	ldr	r3, [r4, #16]
 8003ab4:	462a      	mov	r2, r5
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	4640      	mov	r0, r8
 8003aba:	47d0      	blx	sl
 8003abc:	3001      	adds	r0, #1
 8003abe:	d0ab      	beq.n	8003a18 <_printf_i+0x164>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	079b      	lsls	r3, r3, #30
 8003ac4:	d413      	bmi.n	8003aee <_printf_i+0x23a>
 8003ac6:	68e0      	ldr	r0, [r4, #12]
 8003ac8:	9b03      	ldr	r3, [sp, #12]
 8003aca:	4298      	cmp	r0, r3
 8003acc:	bfb8      	it	lt
 8003ace:	4618      	movlt	r0, r3
 8003ad0:	e7a4      	b.n	8003a1c <_printf_i+0x168>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	4632      	mov	r2, r6
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	4640      	mov	r0, r8
 8003ada:	47d0      	blx	sl
 8003adc:	3001      	adds	r0, #1
 8003ade:	d09b      	beq.n	8003a18 <_printf_i+0x164>
 8003ae0:	3501      	adds	r5, #1
 8003ae2:	68e3      	ldr	r3, [r4, #12]
 8003ae4:	9903      	ldr	r1, [sp, #12]
 8003ae6:	1a5b      	subs	r3, r3, r1
 8003ae8:	42ab      	cmp	r3, r5
 8003aea:	dcf2      	bgt.n	8003ad2 <_printf_i+0x21e>
 8003aec:	e7eb      	b.n	8003ac6 <_printf_i+0x212>
 8003aee:	2500      	movs	r5, #0
 8003af0:	f104 0619 	add.w	r6, r4, #25
 8003af4:	e7f5      	b.n	8003ae2 <_printf_i+0x22e>
 8003af6:	bf00      	nop
 8003af8:	08003e09 	.word	0x08003e09
 8003afc:	08003e1a 	.word	0x08003e1a

08003b00 <memcpy>:
 8003b00:	440a      	add	r2, r1
 8003b02:	4291      	cmp	r1, r2
 8003b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b08:	d100      	bne.n	8003b0c <memcpy+0xc>
 8003b0a:	4770      	bx	lr
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b16:	4291      	cmp	r1, r2
 8003b18:	d1f9      	bne.n	8003b0e <memcpy+0xe>
 8003b1a:	bd10      	pop	{r4, pc}

08003b1c <memmove>:
 8003b1c:	4288      	cmp	r0, r1
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	eb01 0402 	add.w	r4, r1, r2
 8003b24:	d902      	bls.n	8003b2c <memmove+0x10>
 8003b26:	4284      	cmp	r4, r0
 8003b28:	4623      	mov	r3, r4
 8003b2a:	d807      	bhi.n	8003b3c <memmove+0x20>
 8003b2c:	1e43      	subs	r3, r0, #1
 8003b2e:	42a1      	cmp	r1, r4
 8003b30:	d008      	beq.n	8003b44 <memmove+0x28>
 8003b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b3a:	e7f8      	b.n	8003b2e <memmove+0x12>
 8003b3c:	4402      	add	r2, r0
 8003b3e:	4601      	mov	r1, r0
 8003b40:	428a      	cmp	r2, r1
 8003b42:	d100      	bne.n	8003b46 <memmove+0x2a>
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b4e:	e7f7      	b.n	8003b40 <memmove+0x24>

08003b50 <_free_r>:
 8003b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b52:	2900      	cmp	r1, #0
 8003b54:	d044      	beq.n	8003be0 <_free_r+0x90>
 8003b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b5a:	9001      	str	r0, [sp, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8003b62:	bfb8      	it	lt
 8003b64:	18e4      	addlt	r4, r4, r3
 8003b66:	f000 f913 	bl	8003d90 <__malloc_lock>
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <_free_r+0x94>)
 8003b6c:	9801      	ldr	r0, [sp, #4]
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	b933      	cbnz	r3, 8003b80 <_free_r+0x30>
 8003b72:	6063      	str	r3, [r4, #4]
 8003b74:	6014      	str	r4, [r2, #0]
 8003b76:	b003      	add	sp, #12
 8003b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b7c:	f000 b90e 	b.w	8003d9c <__malloc_unlock>
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	d908      	bls.n	8003b96 <_free_r+0x46>
 8003b84:	6825      	ldr	r5, [r4, #0]
 8003b86:	1961      	adds	r1, r4, r5
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	bf01      	itttt	eq
 8003b8c:	6819      	ldreq	r1, [r3, #0]
 8003b8e:	685b      	ldreq	r3, [r3, #4]
 8003b90:	1949      	addeq	r1, r1, r5
 8003b92:	6021      	streq	r1, [r4, #0]
 8003b94:	e7ed      	b.n	8003b72 <_free_r+0x22>
 8003b96:	461a      	mov	r2, r3
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	b10b      	cbz	r3, 8003ba0 <_free_r+0x50>
 8003b9c:	42a3      	cmp	r3, r4
 8003b9e:	d9fa      	bls.n	8003b96 <_free_r+0x46>
 8003ba0:	6811      	ldr	r1, [r2, #0]
 8003ba2:	1855      	adds	r5, r2, r1
 8003ba4:	42a5      	cmp	r5, r4
 8003ba6:	d10b      	bne.n	8003bc0 <_free_r+0x70>
 8003ba8:	6824      	ldr	r4, [r4, #0]
 8003baa:	4421      	add	r1, r4
 8003bac:	1854      	adds	r4, r2, r1
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	6011      	str	r1, [r2, #0]
 8003bb2:	d1e0      	bne.n	8003b76 <_free_r+0x26>
 8003bb4:	681c      	ldr	r4, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	6053      	str	r3, [r2, #4]
 8003bba:	4421      	add	r1, r4
 8003bbc:	6011      	str	r1, [r2, #0]
 8003bbe:	e7da      	b.n	8003b76 <_free_r+0x26>
 8003bc0:	d902      	bls.n	8003bc8 <_free_r+0x78>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	6003      	str	r3, [r0, #0]
 8003bc6:	e7d6      	b.n	8003b76 <_free_r+0x26>
 8003bc8:	6825      	ldr	r5, [r4, #0]
 8003bca:	1961      	adds	r1, r4, r5
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	bf04      	itt	eq
 8003bd0:	6819      	ldreq	r1, [r3, #0]
 8003bd2:	685b      	ldreq	r3, [r3, #4]
 8003bd4:	6063      	str	r3, [r4, #4]
 8003bd6:	bf04      	itt	eq
 8003bd8:	1949      	addeq	r1, r1, r5
 8003bda:	6021      	streq	r1, [r4, #0]
 8003bdc:	6054      	str	r4, [r2, #4]
 8003bde:	e7ca      	b.n	8003b76 <_free_r+0x26>
 8003be0:	b003      	add	sp, #12
 8003be2:	bd30      	pop	{r4, r5, pc}
 8003be4:	2000013c 	.word	0x2000013c

08003be8 <sbrk_aligned>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	4e0e      	ldr	r6, [pc, #56]	; (8003c24 <sbrk_aligned+0x3c>)
 8003bec:	460c      	mov	r4, r1
 8003bee:	6831      	ldr	r1, [r6, #0]
 8003bf0:	4605      	mov	r5, r0
 8003bf2:	b911      	cbnz	r1, 8003bfa <sbrk_aligned+0x12>
 8003bf4:	f000 f8bc 	bl	8003d70 <_sbrk_r>
 8003bf8:	6030      	str	r0, [r6, #0]
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f000 f8b7 	bl	8003d70 <_sbrk_r>
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	d00a      	beq.n	8003c1c <sbrk_aligned+0x34>
 8003c06:	1cc4      	adds	r4, r0, #3
 8003c08:	f024 0403 	bic.w	r4, r4, #3
 8003c0c:	42a0      	cmp	r0, r4
 8003c0e:	d007      	beq.n	8003c20 <sbrk_aligned+0x38>
 8003c10:	1a21      	subs	r1, r4, r0
 8003c12:	4628      	mov	r0, r5
 8003c14:	f000 f8ac 	bl	8003d70 <_sbrk_r>
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d101      	bne.n	8003c20 <sbrk_aligned+0x38>
 8003c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c20:	4620      	mov	r0, r4
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	20000140 	.word	0x20000140

08003c28 <_malloc_r>:
 8003c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c2c:	1ccd      	adds	r5, r1, #3
 8003c2e:	f025 0503 	bic.w	r5, r5, #3
 8003c32:	3508      	adds	r5, #8
 8003c34:	2d0c      	cmp	r5, #12
 8003c36:	bf38      	it	cc
 8003c38:	250c      	movcc	r5, #12
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	db01      	blt.n	8003c44 <_malloc_r+0x1c>
 8003c40:	42a9      	cmp	r1, r5
 8003c42:	d905      	bls.n	8003c50 <_malloc_r+0x28>
 8003c44:	230c      	movs	r3, #12
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	2600      	movs	r6, #0
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c50:	4e2e      	ldr	r6, [pc, #184]	; (8003d0c <_malloc_r+0xe4>)
 8003c52:	f000 f89d 	bl	8003d90 <__malloc_lock>
 8003c56:	6833      	ldr	r3, [r6, #0]
 8003c58:	461c      	mov	r4, r3
 8003c5a:	bb34      	cbnz	r4, 8003caa <_malloc_r+0x82>
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	4638      	mov	r0, r7
 8003c60:	f7ff ffc2 	bl	8003be8 <sbrk_aligned>
 8003c64:	1c43      	adds	r3, r0, #1
 8003c66:	4604      	mov	r4, r0
 8003c68:	d14d      	bne.n	8003d06 <_malloc_r+0xde>
 8003c6a:	6834      	ldr	r4, [r6, #0]
 8003c6c:	4626      	mov	r6, r4
 8003c6e:	2e00      	cmp	r6, #0
 8003c70:	d140      	bne.n	8003cf4 <_malloc_r+0xcc>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	4631      	mov	r1, r6
 8003c76:	4638      	mov	r0, r7
 8003c78:	eb04 0803 	add.w	r8, r4, r3
 8003c7c:	f000 f878 	bl	8003d70 <_sbrk_r>
 8003c80:	4580      	cmp	r8, r0
 8003c82:	d13a      	bne.n	8003cfa <_malloc_r+0xd2>
 8003c84:	6821      	ldr	r1, [r4, #0]
 8003c86:	3503      	adds	r5, #3
 8003c88:	1a6d      	subs	r5, r5, r1
 8003c8a:	f025 0503 	bic.w	r5, r5, #3
 8003c8e:	3508      	adds	r5, #8
 8003c90:	2d0c      	cmp	r5, #12
 8003c92:	bf38      	it	cc
 8003c94:	250c      	movcc	r5, #12
 8003c96:	4629      	mov	r1, r5
 8003c98:	4638      	mov	r0, r7
 8003c9a:	f7ff ffa5 	bl	8003be8 <sbrk_aligned>
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d02b      	beq.n	8003cfa <_malloc_r+0xd2>
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	442b      	add	r3, r5
 8003ca6:	6023      	str	r3, [r4, #0]
 8003ca8:	e00e      	b.n	8003cc8 <_malloc_r+0xa0>
 8003caa:	6822      	ldr	r2, [r4, #0]
 8003cac:	1b52      	subs	r2, r2, r5
 8003cae:	d41e      	bmi.n	8003cee <_malloc_r+0xc6>
 8003cb0:	2a0b      	cmp	r2, #11
 8003cb2:	d916      	bls.n	8003ce2 <_malloc_r+0xba>
 8003cb4:	1961      	adds	r1, r4, r5
 8003cb6:	42a3      	cmp	r3, r4
 8003cb8:	6025      	str	r5, [r4, #0]
 8003cba:	bf18      	it	ne
 8003cbc:	6059      	strne	r1, [r3, #4]
 8003cbe:	6863      	ldr	r3, [r4, #4]
 8003cc0:	bf08      	it	eq
 8003cc2:	6031      	streq	r1, [r6, #0]
 8003cc4:	5162      	str	r2, [r4, r5]
 8003cc6:	604b      	str	r3, [r1, #4]
 8003cc8:	4638      	mov	r0, r7
 8003cca:	f104 060b 	add.w	r6, r4, #11
 8003cce:	f000 f865 	bl	8003d9c <__malloc_unlock>
 8003cd2:	f026 0607 	bic.w	r6, r6, #7
 8003cd6:	1d23      	adds	r3, r4, #4
 8003cd8:	1af2      	subs	r2, r6, r3
 8003cda:	d0b6      	beq.n	8003c4a <_malloc_r+0x22>
 8003cdc:	1b9b      	subs	r3, r3, r6
 8003cde:	50a3      	str	r3, [r4, r2]
 8003ce0:	e7b3      	b.n	8003c4a <_malloc_r+0x22>
 8003ce2:	6862      	ldr	r2, [r4, #4]
 8003ce4:	42a3      	cmp	r3, r4
 8003ce6:	bf0c      	ite	eq
 8003ce8:	6032      	streq	r2, [r6, #0]
 8003cea:	605a      	strne	r2, [r3, #4]
 8003cec:	e7ec      	b.n	8003cc8 <_malloc_r+0xa0>
 8003cee:	4623      	mov	r3, r4
 8003cf0:	6864      	ldr	r4, [r4, #4]
 8003cf2:	e7b2      	b.n	8003c5a <_malloc_r+0x32>
 8003cf4:	4634      	mov	r4, r6
 8003cf6:	6876      	ldr	r6, [r6, #4]
 8003cf8:	e7b9      	b.n	8003c6e <_malloc_r+0x46>
 8003cfa:	230c      	movs	r3, #12
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	4638      	mov	r0, r7
 8003d00:	f000 f84c 	bl	8003d9c <__malloc_unlock>
 8003d04:	e7a1      	b.n	8003c4a <_malloc_r+0x22>
 8003d06:	6025      	str	r5, [r4, #0]
 8003d08:	e7de      	b.n	8003cc8 <_malloc_r+0xa0>
 8003d0a:	bf00      	nop
 8003d0c:	2000013c 	.word	0x2000013c

08003d10 <_realloc_r>:
 8003d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d14:	4680      	mov	r8, r0
 8003d16:	4614      	mov	r4, r2
 8003d18:	460e      	mov	r6, r1
 8003d1a:	b921      	cbnz	r1, 8003d26 <_realloc_r+0x16>
 8003d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d20:	4611      	mov	r1, r2
 8003d22:	f7ff bf81 	b.w	8003c28 <_malloc_r>
 8003d26:	b92a      	cbnz	r2, 8003d34 <_realloc_r+0x24>
 8003d28:	f7ff ff12 	bl	8003b50 <_free_r>
 8003d2c:	4625      	mov	r5, r4
 8003d2e:	4628      	mov	r0, r5
 8003d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d34:	f000 f838 	bl	8003da8 <_malloc_usable_size_r>
 8003d38:	4284      	cmp	r4, r0
 8003d3a:	4607      	mov	r7, r0
 8003d3c:	d802      	bhi.n	8003d44 <_realloc_r+0x34>
 8003d3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d42:	d812      	bhi.n	8003d6a <_realloc_r+0x5a>
 8003d44:	4621      	mov	r1, r4
 8003d46:	4640      	mov	r0, r8
 8003d48:	f7ff ff6e 	bl	8003c28 <_malloc_r>
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d0ed      	beq.n	8003d2e <_realloc_r+0x1e>
 8003d52:	42bc      	cmp	r4, r7
 8003d54:	4622      	mov	r2, r4
 8003d56:	4631      	mov	r1, r6
 8003d58:	bf28      	it	cs
 8003d5a:	463a      	movcs	r2, r7
 8003d5c:	f7ff fed0 	bl	8003b00 <memcpy>
 8003d60:	4631      	mov	r1, r6
 8003d62:	4640      	mov	r0, r8
 8003d64:	f7ff fef4 	bl	8003b50 <_free_r>
 8003d68:	e7e1      	b.n	8003d2e <_realloc_r+0x1e>
 8003d6a:	4635      	mov	r5, r6
 8003d6c:	e7df      	b.n	8003d2e <_realloc_r+0x1e>
	...

08003d70 <_sbrk_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d06      	ldr	r5, [pc, #24]	; (8003d8c <_sbrk_r+0x1c>)
 8003d74:	2300      	movs	r3, #0
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	602b      	str	r3, [r5, #0]
 8003d7c:	f7fd faea 	bl	8001354 <_sbrk>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d102      	bne.n	8003d8a <_sbrk_r+0x1a>
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	b103      	cbz	r3, 8003d8a <_sbrk_r+0x1a>
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	20000144 	.word	0x20000144

08003d90 <__malloc_lock>:
 8003d90:	4801      	ldr	r0, [pc, #4]	; (8003d98 <__malloc_lock+0x8>)
 8003d92:	f000 b811 	b.w	8003db8 <__retarget_lock_acquire_recursive>
 8003d96:	bf00      	nop
 8003d98:	20000148 	.word	0x20000148

08003d9c <__malloc_unlock>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__malloc_unlock+0x8>)
 8003d9e:	f000 b80c 	b.w	8003dba <__retarget_lock_release_recursive>
 8003da2:	bf00      	nop
 8003da4:	20000148 	.word	0x20000148

08003da8 <_malloc_usable_size_r>:
 8003da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dac:	1f18      	subs	r0, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bfbc      	itt	lt
 8003db2:	580b      	ldrlt	r3, [r1, r0]
 8003db4:	18c0      	addlt	r0, r0, r3
 8003db6:	4770      	bx	lr

08003db8 <__retarget_lock_acquire_recursive>:
 8003db8:	4770      	bx	lr

08003dba <__retarget_lock_release_recursive>:
 8003dba:	4770      	bx	lr

08003dbc <_init>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	bf00      	nop
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr

08003dc8 <_fini>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	bf00      	nop
 8003dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dce:	bc08      	pop	{r3}
 8003dd0:	469e      	mov	lr, r3
 8003dd2:	4770      	bx	lr
